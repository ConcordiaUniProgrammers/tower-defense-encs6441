package UserInterfaceClasses;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import GameContraller.FindingPathAlgorithm;
import GameContraller.MapManager;
import GameElements.EmptyGrid;
import GameElements.Grid;
import GameElements.Map;

public class UserInterface extends JFrame {

	int width = 10;
	int height = 10;

	JTextField xField = new JTextField("", 4);
	JTextField yField = new JTextField("", 4);
	JLabel entryPoint = new JLabel("Tag Entery Point");
	JLabel exitPoint = new JLabel("Tag Exit Point");
	JButton startButton = new JButton("Ok");
	JButton startMapButton = new JButton("Draw");
	JButton sinary = new JButton("sinary");
	JButton path = new JButton("path");
	JButton ep = new JButton("entryP");
	JButton exp = new JButton("exitP");
	JButton save = new JButton("Save Map");
	JButton load = new JButton("Load Map");
	JButton designMap = new JButton("Design Map");;
	Color colorToDrawGreed = Color.green;
	int colorInInteger = 1; // 1 = gray , 2 = green, 3 = red, 4 = blue

	Grid grid = new EmptyGrid(height, width);
	MapManager mapManager;
	CanvaObject canva = new CanvaObject();
	FindingPathAlgorithm pathAlgorithm = new FindingPathAlgorithm();
	JPanel lower = new JPanel();
	JPanel entryP = new JPanel();

	// CreatEnemy enimyCreaterThread = null;
	// DrawThread drawEnemyThread = null;

	UserInterface() {
		JPanel upper = new JPanel();

		entryP.add(entryPoint);
		entryP.add(exitPoint);
		entryP.add(startMapButton);
		upper.add(new JLabel("Set map size"));
		upper.add(xField);
		upper.add(yField);
		upper.add(startButton);
		sinary.setBackground(Color.green);
		path.setBackground(Color.gray);
		ep.setBackground(Color.red);
		exp.setBackground(Color.blue);
		upper.add(sinary);
		upper.add(path);
		upper.add(exp);
		upper.add(ep);
		upper.add(save);
		upper.add(load);
		upper.add(designMap);

		// make part of interface invisible to a user
		startMapButton.setVisible(false);

		sinary.setEnabled(false);
		startButton.setVisible(false);
		path.setEnabled(false);
		exp.setEnabled(false);
		ep.setEnabled(false);
		save.setEnabled(false);
		xField.setEnabled(false);
		yField.setEnabled(false);

		sinary.setVisible(false);
		path.setVisible(false);
		exp.setVisible(false);
		ep.setVisible(false);
		save.setVisible(false);
		xField.setVisible(false);
		yField.setVisible(false);
		
		
		
		
		xField.addActionListener(new java.awt.event.ActionListener() {
		    public void actionPerformed(java.awt.event.ActionEvent e) {
		    	if( ! startButton.isVisible())
		    		startButton.setVisible(true);
		    	startButton.setVisible(true);
		    	pack();
		    }
		});
		

		
		xField.addKeyListener(new KeyAdapter()
	    {
	        public void keyPressed(KeyEvent ke)
	        {
		    	if( ! startButton.isVisible())
		    		startButton.setVisible(true);
		    	startButton.setVisible(true);
		    	pack();
	        	
	        }
	    });
		
		yField.addKeyListener(new KeyAdapter()
	    {
	        public void keyPressed(KeyEvent ke)
	        {
		    	if( ! startButton.isVisible())
		    		startButton.setVisible(true);
		    	startButton.setVisible(true);
		    	pack();
	        	
	        }
	    });
		
		
		yField.addActionListener(new java.awt.event.ActionListener() {
		    public void actionPerformed(java.awt.event.ActionEvent e) {
		    	if( !startButton.isVisible())
		    		startButton.setVisible(true);
		    	startButton.setVisible(true);
		    	pack();
	       
		    }
		});
		
		
		designMap.addActionListener( new java.awt.event.ActionListener() {
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			    	xField.setVisible(true);
			    	yField.setVisible(true);
			    	xField.setEnabled(true);
			    	yField.setEnabled(true);
			    	load.setEnabled(false);
			    	designMap.setVisible(false);
			    	 pack();
	 		    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    }
			   
			  }
			
		});
			

		

		load.addActionListener( new java.awt.event.ActionListener() {
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			    				
		               JFileChooser openFile = new JFileChooser();
		               if(JFileChooser.APPROVE_OPTION  == openFile.showOpenDialog(null)){
		                
		               grid =  mapManager.LoadMapFromFile(openFile.getSelectedFile().getAbsolutePath());
		                width = grid.getWidth();
		                height = grid.getHeight();
				    	lower.setSize(width *grid.getUnitSize(), height * grid.getUnitSize());
				    	canva.setSize(width *grid.getUnitSize(), height * grid.getUnitSize());
				    	//designMap.setEnabled(false);
				    	
				    	add(entryP, BorderLayout.CENTER);
				    //++	pathBuilder = new BuildPath(width,height, canva.pathInMatrix ); // content of constructor int width, int height, int[][] map
				    	
				 //++   	String message =  "";
				 //++   	if(! (message = pathBuilder.mapManager()).isEmpty())
				 //++   		JOptionPane.showMessageDialog(null, message);
				    	//JOptionPane.showMessageDialog(null, "............................");
				    	pack();
				    	
				        setLocationRelativeTo(null);
		               }
		               
			    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    }
			  }
			
		});
		
		
		save.addActionListener( new java.awt.event.ActionListener() {
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			    	
	                JFileChooser saveFile = new JFileChooser();
	                
	               
	                if( saveFile.showSaveDialog(null) == JFileChooser.APPROVE_OPTION){
	                	
	                	
	                mapManager.SaveMapIntoFle(grid,saveFile.getSelectedFile().getAbsolutePath());
	                
	            	sinary.setVisible(false);
	            	path.setVisible(false);
	            	exp.setVisible(false);
	            	ep.setVisible(false);
	            	save.setVisible(false);
	            	xField.setVisible(false);
	            	yField.setVisible(false);
	            	save.setVisible(false);
	            	startButton.setVisible(false);
	            	
	            	
	            	load.setEnabled(true);
	            	designMap.setEnabled(true);
	            	
	            	pack();
	                
	                }
			    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    }
			  }
			
		});
		
		sinary.addActionListener( new java.awt.event.ActionListener() {
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			
			    	colorToDrawGreed = sinary.getBackground();
			    	colorInInteger = 2; // green
			    	
			    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    }
			  }
			
		});
			
		path.addActionListener( new java.awt.event.ActionListener() {
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			
			    	colorToDrawGreed = path.getBackground();
			    	colorInInteger = 1; // black for path 
			    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    }
			  }
			
		});	
		
		
		ep.addActionListener( new java.awt.event.ActionListener() {
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			
			    	colorToDrawGreed = ep.getBackground();
			    	colorInInteger = 3; // red for entry point
			    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    }
			  }
			
		});
		
		
		exp.addActionListener( new java.awt.event.ActionListener() {
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			    	colorInInteger = 4; // blue for exit point
			    	colorToDrawGreed = exp.getBackground();
			    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    	
			    }
			  }
			
		});
			
			
			
		
		
		startMapButton.addActionListener(new java.awt.event.ActionListener() 
		{
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			    	if(((Map)grid).getEntryPoint().isEmpty() || ((Map)grid).getExitPOint().isEmpty())
			    		throw new Exception("Entry and exit points are not defined");

			    	canva.repaint();
			    	
		    	
			    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    }
			  }
			});
		
		
		startButton.addActionListener(new java.awt.event.ActionListener()
		{
			  public void actionPerformed(ActionEvent e)
			  {
			    try
			    {
			    	
			    	path.setVisible(true);
			    	sinary.setVisible(true);
			    	exp.setVisible(true);
			    	ep.setVisible(true);
			    	save.setVisible(true);
			    	
			    	
			    	path.setEnabled(true);
			    	sinary.setEnabled(true);
			    	exp.setEnabled(true);
			    	ep.setEnabled(true);
			    	save.setEnabled(true);
			    	
			    	width = Integer.parseInt(xField.getText());
			    	height = Integer.parseInt(yField.getText());
			    	if(width > 60 || width < 5 || height > 60 || height < 5)
			    		throw new java.lang.Exception("Error size max size: ....., min size: ....");
					
			    	//canvas = new GameMap(height,width );
				//	pathAlgorithm = new FindingPathAlgorithm(height,width);

			    	grid.setWidth(width);
			    	grid.setWidth(height);
			    	grid.content = new int[height][width];
			    	
			    	
			  //  	pathAlgorithm.testingX = height; ????????????????????
			  //  	pathAlgorithm.testingY  = width; ???????????????????
			    	
					
			    	// canva.pathInMatrix  = new int[height][width];
			    	lower.setSize(width *grid.getUnitSize(), height * grid.getUnitSize());
			    	canva.setSize(width *grid.getUnitSize(), height * grid.getUnitSize());
			    	
			    	add(entryP, BorderLayout.CENTER);
			    	pack();
			    	
			        setLocationRelativeTo(null);
			        startButton.setEnabled(false);
			        
			    }
			    catch(java.lang.Exception ex)
			    {
			    	JOptionPane.showMessageDialog(null, ex.getMessage());
			    }
			  }
			});
		
		  canva.addMouseListener(new MouseAdapter() {
			     @Override
			     public void mousePressed(MouseEvent e) {
			    	 if(designMap.isEnabled()){
				      int i =   e.getY()/grid.getUnitSize();
				      int j =  e.getX()/grid.getUnitSize();
				      if((i < canva.height_) && (j < canva.wdth_) && (canva.pathInMatrix[i][j] != colorInInteger)){
					      canva.pathInMatrix[i][j] = colorInInteger;
		    		      canva.repaint();
		    		      
					      }
			     }
  		      
			     }
			     
			     
			     @Override
			     public void mouseMoved( MouseEvent e ){
			    	 if(designMap.isEnabled()){
			    		 
				      int i =   e.getY()/canva.sizeOfUnit;
				      int j =  e.getX()/canva.sizeOfUnit;
				      if((i < canva.height_) && (j < canva.wdth_) && (canva.pathInMatrix[i][j] != colorInInteger)){
					      canva.pathInMatrix[i][j] = colorInInteger;
		    		      canva.repaint();
		    		      
					      }
			    	 }
				     
			     } 
			     

			  });
		  
		  canva.addMouseMotionListener(new MouseMotionAdapter() {
			  
			     @Override
			     public void mouseDragged( MouseEvent e ){
			    	 if(designMap.isEnabled()){
				      int i =   e.getY()/canva.sizeOfUnit;
				      int j =  e.getX()/canva.sizeOfUnit;
				      if((i < canva.height_) && (j < canva.wdth_) && (canva.pathInMatrix[i][j] != colorInInteger)){
					      canva.pathInMatrix[i][j] = colorInInteger;
		    		      canva.repaint();
		    		      
					      }
			    	 }
			     } 
		  });
		
		
		canva.setSize(210, 210);
		lower.add(canva);
		
		add(upper, BorderLayout.NORTH);
		add(lower, BorderLayout.SOUTH);
		
		//setLayout(new FlowLayout());
	
      pack();
      setLocationRelativeTo(null);
      setVisible(true);
		

	}

	
	void setMapSize(int width, int height)
	{
		lower.setSize(width *grid.getUnitSize(), height * grid.getUnitSize());
  	canva.setSize(width *grid.getUnitSize(), height * grid.getUnitSize());
  	pack();
      setLocationRelativeTo(null);
	}
}


